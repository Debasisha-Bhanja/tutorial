-----------------------------------------------------------------------------------------------------------------------
Test Suite -> Using Test Suite class we can run multiple Test Class together.
              Test Suite can run using Suite Class Runner

Test Suite Class ->
                    Add following class level annotation 
                    @RunWith(Suite.class)
                    @Suite.SuiteClasses({Class1.clas,Class2.class})
To Run Test Suite
               -> Run as Junit Test Class
-----------------------------------------------------------------------------------------------------------------------
Categories -> Similar to Test Suites in Junit
       Category runner is a specialized kind of Suite Runner 
 In Junit we can add Category annotation to any test class or Test method and include corresponding category
 
 A category class usually a marker interface , but it can also be a class

 Ex of assigning a category to a Test method
       @Test
       @Category(CategoryClass.class)
       public void checkforZero()
       {
         assertEquals(0,service.val)
       }
    
 Ex of applying categories to a class
       @Category(CategoryClass.class)
       public class TestClass {
       
  How to create Test Suite using Category
       Add following class level annotaion to Test Suite class
         @Runwith(Categories.class)
         @IncludeCategory(CategoryClass.class)
         @Suite.SuiteClasses({Class1.clas,Class2.class})
         public class TestSuiteCls{

    -> Output wise here the differnce is it's only run those tests thats belongs to this category

     Like IncludeCategory we can specify exclude Category in Test Suite by using following annotation

     @ExcludeCategory(ExCategoryClass.class)
-------------------------------------------------------------------------------------------------------------------
Parameterized Tests
 1: Create new Class
 2: Add following class level annoation
      @RunWith(Parameterized.class)
 3: create a static method which will returns all parameters
 4: add following annotaion to the same method
     @Parameters
 5: Create a constructor with 2 parameters  one for input and next one is expected value
 6: Create test method
 
 When we execute Parameterized Test class then test method will excute for each defined parameters 
-----------------------------------------------------------------------------------------------------------------------
Expected Exception 
 Used for indepth Exception testing

 Sample Expected Exception Example
  1: Create a Expected Exception rule inside the Test class by using following annotation and instantiate a 
     public ExpectedException class

    @Rule
    public ExpectedException thrown = ExpectedException.none();

  2: Inside the test method we can set up the expectation for the same class
     
     Ex: 
      @Test
      public void isInvalidValue() throw InvalidValueException
      {
        thrown.expect(InvalidValueException.class);
        thrown.expectMessage("Invalid Value");
        service.setValue(-5);
      }

     If both expectation (Exception and message) satisfied then only above test method will pass .
-----------------------------------------------------------------------------------------------------------------------
Theories- Theory basically a test that holds true  under all conditions that meet a set of assumptions.
@Theory -> 

Class with annotation @RumWith(Theories.class)

can use @Theory in place of @Rule
-----------------------------------------------------------------------------------------------------------------------
 Running JUnit from Java Class
   JUnitCore junit = new JUnitCore();
   junit.addListner(new TextListener(System.out)); //To redirect output to console
   junit.run(TestClass.class);
